name: Genix coding

on:
  issues:
    types: [labeled]

jobs:
  run-on-ready-label:
    if: github.event.label.name == 'ready' && github.event.issue.state == 'open' && github.event.issue.locked == false
    runs-on: [developer]
    environment: dev

    env:
      PLANDEX_HOST: ${{ vars.PLANDEX_HOST }}
      PLANDEX_SKIP_CLAUDE_PROMPT: ${{ vars.PLANDEX_SKIP_CLAUDE_PROMPT }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      PLANDEX_TOKEN: ${{ secrets.PLANDEX_TOKEN }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install expect
        run: |
          sudo apt-get update
          sudo apt-get install -y expect
          expect -version

      - name: Show context
        run: |
          echo "üìÇ Workspace: $GITHUB_WORKSPACE"
          echo "üì¶ Repo:      $GITHUB_REPOSITORY"
          echo "üî¢ Issue:     $ISSUE_NUMBER"
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Cleanup ancien run
        run: rm -rf .plandex* plandex.json issue.json

      - name: Authentifier gh avec GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: GitHub auth for PRs
        run: |
          gh auth setup-git
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

      - name: R√©cup√©rer issue JSON
        run: |
          gh issue view "$ISSUE_NUMBER" --repo "$GITHUB_REPOSITORY" --json body --jq '.body' | jq . > issue.json
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Extraire infos issue
        id: parse_issue
        run: |
          ISSUE_ID=$(jq -r '.id' issue.json)
          PROMPT=$(jq -r '.prompt' issue.json)
          MAX_RETRIES=$(jq -r '.max_retries // 5' issue.json)
          ISSUE_NAME=$(jq -r '.name' issue.json)
          echo "issue_id=$ISSUE_ID" >> $GITHUB_OUTPUT
          echo "prompt=$PROMPT" >> $GITHUB_OUTPUT
          echo "max_retries=$MAX_RETRIES" >> $GITHUB_OUTPUT
          echo "issue_name=$ISSUE_NAME" >> $GITHUB_OUTPUT

      - name: Cr√©er branche
        run: git checkout -b "${{ steps.parse_issue.outputs.issue_id }}"

      - name: Init Plandex
        run: |
          plandex models custom -f /actions-runner/config/anthropic-models.json --save
          plandex set-model default anthropic-blend

      - name: Debug runner state
        run: |
          echo "PWD=$(pwd)"
          echo "TTY: $([ -t 0 ] && echo 'YES' || echo 'NO')"
          echo "=== Git status ==="
          git status
          echo "=== Files ==="
          ls -la

      - name: Create expect script
        run: |
          cat > run_plandex.exp << 'EXPECTEOF'
          #!/usr/bin/expect -f
          
          set timeout 300
          set issue_id [lindex $argv 0]
          
          log_user 1
          
          puts "=== Starting Plandex with expect ==="
          puts "Issue ID: $issue_id"
          
          puts "=== Creating new plan ==="
          spawn plandex new -n $issue_id
          expect eof
          
          sleep 1
          
          puts "=== Running tell command ==="
          spawn plandex tell --apply --commit --auto-exec --no-stream --file prompt.txt
          expect eof
          
          puts "=== Plandex execution finished ==="
          exit 0
          EXPECTEOF
          
          chmod +x run_plandex.exp

      - name: Run Plandex with expect
        run: |
          set -e
          ISSUE_ID=$(jq -r '.id' issue.json)
          jq -r '.prompt' issue.json > prompt.txt
          
          echo "=== issue.json ==="
          cat issue.json
          echo ""
          echo "=== prompt.txt ==="
          cat prompt.txt
          echo ""
          
          ./run_plandex.exp "$ISSUE_ID"
          
          echo "=== Files after plandex ==="
          ls -la
          
          rm -f prompt.txt run_plandex.exp

      - name: V√©rifier les changements
        run: |
          echo "=== Git status after Plandex ==="
          git status
          echo "=== Git diff ==="
          git diff --name-only
          echo "=== Files in directory ==="
          ls -la

      - name: Commit et push si changements
        run: |
          if ! git diff --quiet || ! git diff --cached --quiet; then
            git add -A
            git commit -m "feat: ${{ steps.parse_issue.outputs.issue_name }}"
            git push --set-upstream origin "${{ steps.parse_issue.outputs.issue_id }}"
            echo "changes_made=true" >> $GITHUB_ENV
          else
            echo "Aucun changement d√©tect√©"
            echo "changes_made=false" >> $GITHUB_ENV
          fi

      - name: Cr√©er Pull Request
        if: env.changes_made == 'true'
        run: |
          gh pr create --base main --head "${{ steps.parse_issue.outputs.issue_id }}" --title "feat: ${{ steps.parse_issue.outputs.issue_name }}" --body "ü§ñ Auto-generated by Plandex - Resolves #${{ github.event.issue.number }}"

      - name: Merge Pull Request et supprimer branche
        if: env.changes_made == 'true'
        run: gh pr merge "${{ steps.parse_issue.outputs.issue_id }}" --merge --delete-branch

      - name: Fermer l'issue
        if: env.changes_made == 'true'
        run: gh issue close "$ISSUE_NUMBER" --comment "‚úÖ Termin√© et merg√© par Plandex"
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Commenter si pas de changements
        if: env.changes_made == 'false'
        run: gh issue comment "$ISSUE_NUMBER" --body "‚ö†Ô∏è Plandex s'est ex√©cut√© mais n'a produit aucun changement"
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
