# Checker les clients au debut du projet


name: Genix coding

on:
  issues:
    types: [labeled]

jobs:
  run-on-ready-label:

    if: github.event.label.name == 'ready' && github.event.issue.state == 'open'
    runs-on: [developer]
    environment: dev

    # env:
    #   PLANDEX_HOST: ${{ vars.PLANDEX_HOST }}
    #   PLANDEX_SKIP_CLAUDE_PROMPT: ${{ vars.PLANDEX_SKIP_CLAUDE_PROMPT }}
    #   ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
    #   PLANDEX_TOKEN: ${{ secrets.PLANDEX_TOKEN }}
    
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check blockers
        id: check
        run: |
          issue=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }})

          state=$(echo "$issue" | jq -r '.state')
          locked=$(echo "$issue" | jq -r '.locked')
          blocked=$(echo "$issue" | jq -r '.issue_dependencies_summary.blocked_by')

          echo "state=$state"
          echo "locked=$locked"
          echo "blocked_by=$blocked"

          if [[ "$state" != "open" || "$locked" == "true" || "$blocked" -gt 0 ]]; then
            echo "Issue not runnable (state=$state, locked=$locked, blocked_by=$blocked). Skipping."
            exit 78
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show context
        run: |
          echo "üìÇ Workspace: $GITHUB_WORKSPACE"
          echo "üì¶ Repo:      $GITHUB_REPOSITORY"
          echo "üî¢ Issue:     $ISSUE_NUMBER"
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Cleanup ancien run
        run: rm -rf .plandex* plandex.json issue.json

      - name: Authentifier gh avec GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: GitHub auth for PRs
        run: |
          gh auth setup-git
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name  "github-actions[bot]"

      - name: R√©cup√©rer issue JSON
        run: |
          gh issue view "$ISSUE_NUMBER" \
            --repo "$GITHUB_REPOSITORY" \
            --json body --jq '.body' | jq . > issue.json
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}

      - name: Extraire infos issue
        id: parse_issue
        run: |
          ISSUE_ID=$(jq -r '.id' issue.json)
          PROMPT=$(jq -r '.prompt' issue.json)
          MAX_RETRIES=$(jq -r '.max_retries // 5' issue.json)
          ISSUE_NAME=$(jq -r '.name' issue.json)

          echo "issue_id=$ISSUE_ID"       >> $GITHUB_OUTPUT
          echo "prompt=$PROMPT"           >> $GITHUB_OUTPUT
          echo "max_retries=$MAX_RETRIES" >> $GITHUB_OUTPUT
          echo "issue_name=$ISSUE_NAME"   >> $GITHUB_OUTPUT

      - name: Cr√©er branche
        run: git checkout -b "${{ steps.parse_issue.outputs.issue_id }}"

      - name: Init Plandex
        run: |
          plandex models custom -f /actions-runner/config/anthropic-models.json --save
          plandex set-model default anthropic-blend
        env:
          PLANDEX_HOST: ${{ vars.PLANDEX_HOST }}
          PLANDEX_SKIP_CLAUDE_PROMPT: ${{ vars.PLANDEX_SKIP_CLAUDE_PROMPT }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PLANDEX_TOKEN: ${{ secrets.PLANDEX_TOKEN }}

      - name: Debug runner state
        run: |
          echo "PWD=$(pwd)"
          echo "=== Git status ==="
          git status
          echo "=== Files ==="
          ls -la

      - name: Run Plandex
        run: |
          # 1. R√©cup√©rer l'ID de l'issue
          ISSUE_ID=$(jq -r '.id' issue.json)

          # 2. Cr√©er une nouvelle plan branch Plandex
          plandex new -n "$ISSUE_ID"

          # 3. Extraire le prompt dans un fichier temporaire
          jq -r '.prompt' issue.json > "$RUNNER_TEMP/prompt.txt"

          echo "=== issue.json ==="
          cat issue.json
          echo ""
          echo "=== prompt.txt ==="
          cat "$RUNNER_TEMP/prompt.txt"
          echo ""

          # 4. Ex√©cuter plandex avec le prompt
          # plandex tell --apply --commit --auto-exec --no-exec --file "$RUNNER_TEMP/prompt.txt" > plandex_output.log 2>&1 || true
          # echo "" | plandex tell --apply --commit --auto-exec --no-exec --file "$RUNNER_TEMP/prompt.txt" 2>&1 | cat
          plandex tell --apply --commit --auto-exec --no-exec --file "$RUNNER_TEMP/prompt.txt" < /dev/null 2>&1

          
          # 5. Nettoyer
          rm -f "$RUNNER_TEMP/prompt.txt"

        env:
          PLANDEX_HOST: ${{ vars.PLANDEX_HOST }}
          PLANDEX_SKIP_CLAUDE_PROMPT: ${{ vars.PLANDEX_SKIP_CLAUDE_PROMPT }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PLANDEX_TOKEN: ${{ secrets.PLANDEX_TOKEN }}

      - name: Push branche vers GitHub
        run: git push --set-upstream origin "${{ steps.parse_issue.outputs.issue_id }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cr√©er Pull Request
        run: |
          gh pr create \
            --base main \
            --head "${{ steps.parse_issue.outputs.issue_id }}" \
            --title "Merge ${{ steps.parse_issue.outputs.issue_id }} into main" \
            --body "PR auto - ${{ steps.parse_issue.outputs.issue_name }}"

      - name: Merge Pull Request et supprimer branche
        run: gh pr merge "${{ steps.parse_issue.outputs.issue_id }}" --merge --delete-branch

      - name: Fermer l‚Äôissue
        run: gh issue close "$ISSUE_NUMBER" --comment "‚úÖ Dev termin√© et merg√© par Plandex (local, no-cloud)"
        env:
          ISSUE_NUMBER: ${{ github.event.issue.number }}
